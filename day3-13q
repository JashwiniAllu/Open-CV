import cv2
import numpy as np

def find_keypoints_and_matches(img1, img2):
    sift = cv2.SIFT_create()
    kp1, des1 = sift.detectAndCompute(img1, None)
    kp2, des2 = sift.detectAndCompute(img2, None)
    
    bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=True)
    matches = bf.match(des1, des2)
    matches = sorted(matches, key=lambda x: x.distance)
    return kp1, kp2, matches

def reconstruct_3D(kp1, kp2, matches, K):
    pts1 = np.float32([kp1[m.queryIdx].pt for m in matches])
    pts2 = np.float32([kp2[m.trainIdx].pt for m in matches])
    
    E, mask = cv2.findEssentialMat(pts1, pts2, K)
    _, R, t, mask = cv2.recoverPose(E, pts1, pts2, K)
    
    points_3D = cv2.triangulatePoints(np.hstack((np.eye(3), np.zeros((3, 1)))), np.hstack((R, t)), pts1.T, pts2.T)
    points_3D /= points_3D[3]
    
    return points_3D.T

K = np.array([[718.856, 0, 607.1928],
              [0, 718.856, 185.2157],
              [0, 0, 1]])

img1 = cv2.imread('img1.jpg', 0)
img2 = cv2.imread('img2.jpg', 0)
kp1, kp2, matches = find_keypoints_and_matches(img1, img2)
points_3D = reconstruct_3D(kp1, kp2, matches, K)
print(points_3D)
